/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.Conexion;

/**
 *
 * @author thecr
 */
public class BarberoCitas extends javax.swing.JFrame {

    /**
     * Creates new form BarberoCitas
     */
    public BarberoCitas() {
        initComponents();
        cargarCitas();
        TablaCitas.getColumnModel().getColumn(0).setMinWidth(0);
TablaCitas.getColumnModel().getColumn(0).setMaxWidth(0);
btnConfirmar.addActionListener(e -> actualizarEstadoCita("confirmada"));
brnCancelar.addActionListener(e -> actualizarEstadoCita("cancelada"));
btnTerminar.addActionListener(e -> actualizarEstadoCita("completada"));


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaCitas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaClienteActual = new javax.swing.JTextArea();
        btnTerminar = new javax.swing.JButton();
        brnCancelar = new javax.swing.JButton();
        btnConfirmar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TablaCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TablaCitas);

        textAreaClienteActual.setColumns(20);
        textAreaClienteActual.setRows(5);
        jScrollPane2.setViewportView(textAreaClienteActual);

        btnTerminar.setText("Terminar");

        brnCancelar.setText("Cancelar");

        btnConfirmar.setText("Comfirmar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(brnCancelar)
                        .addGap(43, 43, 43)
                        .addComponent(btnConfirmar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(btnTerminar)
                        .addGap(74, 74, 74))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTerminar)
                    .addComponent(brnCancelar)
                    .addComponent(btnConfirmar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BarberoCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BarberoCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BarberoCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BarberoCitas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BarberoCitas().setVisible(true);
            }
        });
    }

    DefaultTableModel modelo;
int citaActual = 0;

private void cargarCitas() {
    modelo = new DefaultTableModel(new String[]{"ID", "Cliente", "Barbero", "Servicio", "Fecha", "Estado"}, 0);
    try (Connection conn = Conexion.getConexion()) {
        PreparedStatement ps = conn.prepareStatement(
    "SELECT c.id, u_cliente.nombre AS cliente, u_barbero.nombre AS barbero, " +
    "s.nombre AS servicio, c.fecha, c.estado " +
    "FROM citas c " +
    "JOIN usuarios u_cliente ON c.id_usuario = u_cliente.id " +
    "JOIN usuarios u_barbero ON c.id_barbero = u_barbero.id " +
    "JOIN servicios s ON c.id_servicio = s.id " +
    "WHERE c.estado NOT IN ('cancelada', 'completada') " +
    "ORDER BY c.fecha ASC"
);

        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            modelo.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("cliente"),
                rs.getString("barbero"),
                rs.getString("servicio"),
                rs.getTimestamp("fecha"),
                rs.getString("estado")
            });
        }
        TablaCitas.setModel(modelo);
        mostrarCitaActual();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al cargar citas: " + ex.getMessage());
    }
}

private void mostrarCitaActual() {
    if (modelo.getRowCount() > 0) {
        String citaTexto = "Cliente: " + modelo.getValueAt(citaActual, 1) +
                           "\nBarbero: " + modelo.getValueAt(citaActual, 2) +
                           "\nServicio: " + modelo.getValueAt(citaActual, 3) +
                           "\nFecha: " + modelo.getValueAt(citaActual, 4) +
                           "\nEstado: " + modelo.getValueAt(citaActual, 5);
        textAreaClienteActual.setText(citaTexto);
    } else {
        textAreaClienteActual.setText("No hay citas pendientes.");
    }
}

private void actualizarEstadoCita(String nuevoEstado) {
    if (modelo.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No hay citas disponibles.");
        return;
    }

    int idCita = (int) modelo.getValueAt(citaActual, 0); // ID de la cita seleccionada

    int confirm = JOptionPane.showConfirmDialog(this, "¿Estás seguro de cambiar el estado a " + nuevoEstado + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = Conexion.getConexion();
             PreparedStatement ps = conn.prepareStatement("UPDATE citas SET estado = ? WHERE id = ?")) {

            ps.setString(1, nuevoEstado);
            ps.setInt(2, idCita);

            int resultado = ps.executeUpdate();

            if (resultado > 0) {
                // Solo eliminar si fue cancelada o completada
                if (nuevoEstado.equals("cancelada") || nuevoEstado.equals("completada")) {
                    modelo.removeRow(citaActual);
                } else {
                    modelo.setValueAt(nuevoEstado, citaActual, 5); // Solo actualiza el estado en la tabla
                }
                mostrarCitaActual(); // Muestra siguiente o actualiza info
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo actualizar el estado.");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage());
        }
    }
}






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaCitas;
    private javax.swing.JButton brnCancelar;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnTerminar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textAreaClienteActual;
    // End of variables declaration//GEN-END:variables
}
